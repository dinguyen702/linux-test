This directory contains uboot scripts that can be used for development or
testing. The intent is for these scripts to be usable for development
testing and LAVA testing. The test scripts can be individually run by the
developer using bash scripts and expect, or these scripts may be "invoked"
by LAVA's JSON job control scripts. 

In order to maintain these lofty goals, the following conventions apply:

TBD

Since this project is farily new at this time, we're not too sure of all
the required options. So adding a test case should proceed as follows:

1) Define the test case in text, write up what's tested, how it's tested, 
   negative and positive test case results. 
2) Write the uboot script shell, think about the differences between the
   LAVA test environment and the developer environment. Document those
   differences and how environment specific configuration information will
   be defined and taken care of in the two different environments.
3) Test the test case in the LAVA environment, and the development 
   environment.
4) Improve, and iterate on these steps until the test case is developed.
5) Document any additions to the interface abstractions across the 
   LAVA test environment and the development environment in this README.

The scripts contained within this project are described below. 

TBD

UBoot Script Tips and Tricks

Loadable image put at 100000 .
SOCFPGA_CYCLONE5 # if imi 100000; then echo Image OK; else echo Image corrupted!!; fi

## Checking Image at 00100000 ...
   Legacy image found
   Image Name:   Test Script for U-Boot
   Image Type:   PowerPC Linux Script (uncompressed)
   Data Size:    687 Bytes = 687 Bytes
   Load Address: 00000000
   Entry Point:  00000000
   Contents:
      Image 0: 679 Bytes = 679 Bytes
   Verifying Checksum ... OK
Image OK
SOCFPGA_CYCLONE5 # if imi 10000; then echo Image OK; else echo Image corrupted!!; fi

## Checking Image at 00010000 ...
Unknown image format!
Image corrupted!!

Testing variables ..
SOCFPGA_CYCLONE5 # if test "${a}" = "${b}"; then echo "same"; fi
SOCFPGA_CYCLONE5 # setenv a true
SOCFPGA_CYCLONE5 # setenv b true
SOCFPGA_CYCLONE5 # if test "${a}" = "${b}"; then echo "same"; fi
same
SOCFPGA_CYCLONE5 # setenv a false
SOCFPGA_CYCLONE5 # if test "${a}" = "${b}"; then echo "same"; fi
SOCFPGA_CYCLONE5 #

SOCFPGA_CYCLONE5 # if ping 192.199.1.1; then echo ping ok; else echo ping not ok; fi
Using mii0 device
host 192.199.1.1 is alive
ping ok
SOCFPGA_CYCLONE5 # if ping 192.199.1.3; then echo ping ok; else echo ping not ok; fi
Using mii0 device
ping failed; host 192.199.1.3 is not alive
ping not ok

